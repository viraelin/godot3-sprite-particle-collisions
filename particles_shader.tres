[gd_resource type="Shader" format=2]

[resource]
code = "shader_type particles;

uniform vec3 direction = vec3(1.0, 0.0, 0.0);
uniform float spread = 45.0;
uniform float flatness = 0.0;
uniform float initial_linear_velocity = 0.0;
uniform float initial_angle = 0.0;
uniform float angular_velocity = 0.0;
uniform float orbit_velocity = 0.0;
uniform float linear_accel = 0.0;
uniform float radial_accel = 0.0;
uniform float tangent_accel = 0.0;
uniform float damping = 0.0;
uniform float scale = 1.0;
uniform float hue_variation = 0.0;
uniform float anim_speed;
uniform float anim_offset;
uniform float initial_linear_velocity_random = 0.0;
uniform float initial_angle_random = 0.0;
uniform float angular_velocity_random = 0.0;
uniform float orbit_velocity_random = 0.0;
uniform float linear_accel_random = 0.0;
uniform float radial_accel_random = 0.0;
uniform float tangent_accel_random = 0.0;
uniform float damping_random = 0.0;
uniform float scale_random = 0.0;
uniform float hue_variation_random = 0.0;
uniform float anim_speed_random = 0.0;
uniform float anim_offset_random = 0.0;
uniform float lifetime_randomness = 0.0;
uniform vec3 emission_box_extents = vec3(1.0, 1.0, 0.0);
uniform vec4 color_value: hint_color;
uniform int trail_divisor;
uniform vec3 gravity = vec3(0.0, 98.0, 0.0);
uniform sampler2D color_ramp;
uniform sampler2D scale_texture;

uniform sampler2D sprite;
uniform sampler2D collision;

uniform vec2 sprite_pos = vec2(0.0);
uniform float collision_mipmap = 2.0;
uniform float sample_range = 1.0;
uniform float sample_step = 1.0;
uniform float velocity_decay_x = 0.50;
uniform float velocity_decay_y = 0.25;
uniform float bounce_decay_alpha = 2.0;

float max_xy(float x, float y) {
	return max(sign(y - x), 0.0);
}

float pixel_is_solid(vec2 pos) {
	return textureLod(collision, pos / vec2(textureSize(collision, 0)), collision_mipmap).r;
}

vec2 collision_normal(vec2 pos) {
	vec2 avg = vec2(0.0);
	for(float i = -sample_range; i <= sample_range; i+= sample_step) {
		for(float j = -sample_range; j <= sample_range; j += sample_step) {
			avg -= vec2(i, j) * (pixel_is_solid(vec2(pos.x + i, pos.y + j)));
		}
	}
	if(avg.x == 0.0 && avg.y == 0.0)
		avg = vec2(0.0);
	else
		avg = normalize(avg);
	return avg;
}

float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void vertex() {
	uint base_number = NUMBER / uint(trail_divisor);
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;
	bool restart = false;
	float tv = 0.0;
	if (CUSTOM.y > CUSTOM.w) {
		restart = true;
		tv = 1.0;
	}
	
	if (RESTART || restart) {
		uint alt_restart_seed = hash(base_number + uint(301184) + RANDOM_SEED);
		float tex_linear_velocity = 0.0;
		float tex_angle = 0.0;
		float tex_anim_offset = 0.0;
		float spread_rad = spread * degree_to_rad;
		{
			float angle1_rad = rand_from_seed_m1_p1(alt_restart_seed) * spread_rad;
			angle1_rad += direction.x != 0.0 ? atan(direction.y, direction.x) : sign(direction.y) * (pi / 2.0);
			vec3 rot = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
			VELOCITY = rot * initial_linear_velocity * mix(1.0, rand_from_seed(alt_restart_seed), initial_linear_velocity_random);
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.y = 0.0;
		CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_restart_seed));
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random);
		
		TRANSFORM[3].xyz = vec3(rand_from_seed(alt_restart_seed) * 2.0 - 1.0, rand_from_seed(alt_restart_seed) * 2.0 - 1.0, rand_from_seed(alt_restart_seed) * 2.0 - 1.0) * emission_box_extents;
		VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
		TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		VELOCITY.z = 0.0;
		TRANSFORM[3].z = 0.0;
	}
	else {
		CUSTOM.y += DELTA / LIFETIME;
		tv = CUSTOM.y / CUSTOM.w;
		float tex_linear_velocity = 0.0;
		float tex_orbit_velocity = 0.0;
		float tex_angular_velocity = 0.0;
		float tex_linear_accel = 0.0;
		float tex_radial_accel = 0.0;
		float tex_tangent_accel = 0.0;
		float tex_damping = 0.0;
		float tex_angle = 0.0;
		float tex_anim_speed = 0.0;
		float tex_anim_offset = 0.0;
		vec3 force = gravity;
		vec3 pos = TRANSFORM[3].xyz;
		pos.z = 0.0;
		// apply linear acceleration
		force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * (linear_accel + tex_linear_accel) * mix(1.0, rand_from_seed(alt_seed), linear_accel_random) : vec3(0.0);
		// apply radial acceleration
		vec3 org = EMISSION_TRANSFORM[3].xyz;
		vec3 diff = pos - org;
		force += length(diff) > 0.0 ? normalize(diff) * (radial_accel + tex_radial_accel) * mix(1.0, rand_from_seed(alt_seed), radial_accel_random) : vec3(0.0);
		// apply tangential acceleration;
		force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * ((tangent_accel + tex_tangent_accel) * mix(1.0, rand_from_seed(alt_seed), tangent_accel_random)) : vec3(0.0);
		// apply attractor forces
		VELOCITY += force * DELTA;
		// orbit velocity
		float orbit_amount = (orbit_velocity + tex_orbit_velocity) * mix(1.0, rand_from_seed(alt_seed), orbit_velocity_random);
		if (orbit_amount != 0.0) {
			float ang = orbit_amount * DELTA * pi * 2.0;
			mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
			TRANSFORM[3].xy -= diff.xy;
			TRANSFORM[3].xy += rot * diff.xy;
		}
		if (damping + tex_damping > 0.0) {
			float v = length(VELOCITY);
			float damp = (damping + tex_damping) * mix(1.0, rand_from_seed(alt_seed), damping_random);
			v -= damp * DELTA;
			if (v < 0.0) {
				VELOCITY = vec3(0.0);
			} else {
				VELOCITY = normalize(VELOCITY) * v;
			}
		}
		float base_angle = (initial_angle + tex_angle) * mix(1.0, angle_rand, initial_angle_random);
		base_angle += CUSTOM.y * LIFETIME * (angular_velocity + tex_angular_velocity) * mix(1.0, rand_from_seed(alt_seed) * 2.0 - 1.0, angular_velocity_random);
		CUSTOM.x = base_angle * degree_to_rad;
		CUSTOM.z = (anim_offset + tex_anim_offset) * mix(1.0, anim_offset_rand, anim_offset_random) + CUSTOM.y * (anim_speed + tex_anim_speed) * mix(1.0, rand_from_seed(alt_seed), anim_speed_random);
	}
	
	float tex_scale = textureLod(scale_texture, vec2(tv, 0.0), 0.0).r;
	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	float base_scale = tex_scale * mix(scale, 1.0, scale_random * scale_rand);
	if (base_scale < 0.000001) {
		base_scale = 0.000001;
	}
	TRANSFORM[0].xyz *= base_scale;
	TRANSFORM[1].xyz *= base_scale;
	TRANSFORM[2].xyz *= base_scale;
	VELOCITY.z = 0.0;
	
	TRANSFORM[3].z = 0.0;
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
	
	if (RESTART) {
		vec2 particle_pos = TRANSFORM[3].xy;
		vec2 texture_size = vec2(textureSize(sprite, 0));
		vec4 sprite_color = texture(sprite, (particle_pos + sprite_pos) / texture_size + vec2(0.5));
		COLOR = sprite_color;
		if (COLOR.a == 0.0) {
			ACTIVE = false;
		}
	}
	
	float collision_v = pixel_is_solid(TRANSFORM[3].xy);
	if(!RESTART && collision_v < 1.0) {
		vec2 normal = collision_normal(TRANSFORM[3].xy);
		if(normal.x == 0.0 && normal.y == 0.0) {
			// inside collision
			VELOCITY.x = 0.0;
			VELOCITY.y = 0.0;
			COLOR.a = 0.0;
		}
		else {
			// hit collision
			COLOR.a -= bounce_decay_alpha * DELTA;
			if (COLOR.a <= 0.0) {
				ACTIVE = false;
			}
			
			VELOCITY += normalize(vec3(angle_rand - 0.5, angle_rand - 0.5, 0.0)) * initial_linear_velocity * max_xy(length(VELOCITY), 0.0001);
			float projection = dot(VELOCITY.xy, normal);
			VELOCITY.xy = reflect(vec3(VELOCITY.xy, 0.0), vec3(normal, 0.0)).xy;
			
			VELOCITY.x *= velocity_decay_x;
			VELOCITY.y *= velocity_decay_y;
			
			TRANSFORM[3].xy += VELOCITY.xy * DELTA;
		}
	}
}"
